"""
Django settings for core project.
Generated by 'django-admin startproject' using Django 4.2.23.
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# -- Load .env file based on environment --
BASE_DIR = Path(__file__).resolve().parent.parent


def running_in_docker():
    return os.path.exists("/.dockerenv")


if running_in_docker():
    dotenv_path = BASE_DIR.parent / ".env.docker"
else:
    dotenv_path = BASE_DIR.parent / ".env.local"

if dotenv_path.exists():
    load_dotenv(dotenv_path)

    # -- CoinGecko API settings --
COINGECKO_LIST_URL = os.getenv("COINGECKO_LIST_URL", "https://api.coingecko.com/api/v3/coins/list")
COINGECKO_MARKET_URL = os.getenv("COINGECKO_MARKET_URL", "https://api.coingecko.com/api/v3/coins/markets")
COINGECKO_MAX_RETRIES = int(os.getenv("COINGECKO_MAX_RETRIES", 5))

# -- NewsAPI settings --
NEWSAPI_URL = os.getenv("NEWSAPI_URL", "https://newsapi.org/v2/everything")
NEWSAPI_KEY = os.getenv("NEWSAPI_KEY", "")
NEWSAPI_PAGE_SIZE = int(os.getenv("NEWSAPI_PAGE_SIZE", 20))

# -- Security settings --
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
DEBUG = os.getenv("DJANGO_DEBUG", "False") == "True"
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "*").split(",")

# -- Application definition --
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "corsheaders",
    "rest_framework",
    "django_celery_beat",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True  # Solo per sviluppo!

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# -- Database --
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
    }
}

# -- Password validation --
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# -- Internationalization --
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# -- Static files --
STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# -- Celery settings --
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# -- Celery Beat schedule --
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    "update-crypto-list": {
        "task": "core.celery_tasks.crypto_list.update_crypto_list",
        "schedule": crontab(minute=5, hour="*/3"),  # ogni 3 ore alle xx:05
        "options": {"queue": "default"},
    },
    "update-cryptos": {
        "task": "core.celery_tasks.crypto_sync.update_cryptos",
        "schedule": crontab(minute=10, hour="*/3"),  # ogni 3 ore alle xx:10
        "options": {"queue": "default"},
    },
    "update-news": {
        "task": "core.celery_tasks.news_sync.update_news",
        "schedule": crontab(minute=15, hour="*/3"),  # ogni 3 ore alle xx:15
        "options": {"queue": "default"},
    },
}
