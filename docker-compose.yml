version: "3.8"

networks:
  cloudsec_net:
    name: cloudsec_net
    driver: bridge

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: cloudsec
      POSTGRES_USER: cloudsec
      POSTGRES_PASSWORD: cloudsec
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudsec"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudsec_net

  redis:
    image: redis:7.2-alpine
    container_name: redis
    command: redis-server --maxmemory 25mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - cloudsec_net

  backend:
    build:
      context: ./backend
    container_name: backend
    command: sh -c "python manage.py migrate && python manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - media_data:/app/media
    env_file:
      - .env.local
      - .env.docker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - cloudsec_net

  celery:
    build:
      context: ./backend
    container_name: celery
    command: celery -A core worker -l info
    volumes:
      - ./backend:/app
      - media_data:/app/media
    env_file:
      - .env.local
      - .env.docker
    depends_on:
      - backend
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "core", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - cloudsec_net

  celery-beat:
    build:
      context: ./backend
    container_name: celery-beat
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
      - media_data:/app/media
    env_file:
      - .env.local
      - .env.docker
    depends_on:
      - backend
      - redis
    restart: unless-stopped
    networks:
      - cloudsec_net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    stdin_open: true
    tty: true
    volumes:
      - ./frontend:/app
    environment:
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "3002:3000"
    restart: unless-stopped
    networks:
      - cloudsec_net

  flower:
    image: mher/flower:latest
    container_name: flower
    command: celery --broker=redis://redis:6379/0 flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery
      - celery-beat
    restart: unless-stopped
    networks:
      - cloudsec_net

  dbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: dbeaver
    ports:
      - "8978:8978"
    depends_on:
      - postgres
    networks:
      - cloudsec_net
    restart: unless-stopped

  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    image: my-jenkins:latest
    container_name: jenkins
    ports:
      - "8080:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      JENKINS_OPTS: --prefix=/jenkins
    networks:
      - cloudsec_net
    restart: unless-stopped

  docker-agent:
    image: jenkins/inbound-agent:latest
    container_name: docker-agent
    environment:
      - JENKINS_URL=http://jenkins:8080/jenkins/
      - JENKINS_AGENT_NAME=docker-agent
      - JENKINS_SECRET=7d5674a71f80258dd625a993cdb7cdeedded7ade387d912765c3349538209268
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - agent_home:/home/jenkins/agent
    depends_on:
      - jenkins
    networks:
      - cloudsec_net
    restart: unless-stopped

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
    networks:
      - cloudsec_net

volumes:
  postgres_data:
  media_data:
  jenkins_home:
  portainer_data:
  agent_home:
